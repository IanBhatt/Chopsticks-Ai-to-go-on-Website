import math
p2 = [1, 1]
p1 = [1, 1]
outsideDepth0 = []
outsideDepth1 = []
outsideDepth2 = []
outsideDepth3 = []
outsideDepth4 = []
outsideDepth5 = []
finishing = False
def board():
    print("_________________________")
    print(" Computer | " + str(p2[0]) + "  " + str(p2[1]) + " | L  R")
    print(" You      | " + str(p1[0]) + "  " + str(p1[1]) + " | L  R")
    print("¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯")


def bumpcheck(x1, x2):
    if [x1, x2] == [0, 1]:
        return [1]
    if [x1, x2] == [0, 2]:
        return [1, 2]
    if [x1, x2] == [0, 3]:
        return [1, 2, 3]
    if [x1, x2] == [0, 4]:
        return [1, 2, 3, 4]
    if [x1, x2] == [1, 0]:
        return [0]
    if [x1, x2] == [2, 0]:
        return [1, 0]
    if [x1, x2] == [3, 0]:
        return [2, 1, 0]
    if [x1, x2] == [4, 0]:
        return [3, 2, 1, 0]
    if [x1, x2] == [1, 1]:
        return [0, 2]
    if [x1, x2] == [1, 2]:
        return [0, 2, 3]
    if [x1, x2] == [1, 3]:
        return [0, 2, 3, 4]
    if [x1, x2] == [1, 4]:
        return [2, 3, 4]
    if [x1, x2] == [2, 1]:
        return [0, 1, 3]
    if [x1, x2] == [2, 2]:
        return [0, 1, 3, 4]
    if [x1, x2] == [2, 3]:
        return [1, 3, 4]
    if [x1, x2] == [2, 4]:
        return [3, 4]
    if [x1, x2] == [3, 1]:
        return [0, 1, 2, 4]
    if [x1, x2] == [3, 2]:
        return [1, 2, 4]
    if [x1, x2] == [3, 3]:
        return [2, 4]
    if [x1, x2] == [3, 4]:
        return [4]
    if [x1, x2] == [4, 1]:
        return [1, 2, 3]
    if [x1, x2] == [4, 2]:
        return [2, 3]
    if [x1, x2] == [4, 3]:
        return [3]
    if[x1, x2] == [4, 4]:
        return ["no bumps"]


def playermove(p1l, p1r, p2l, p2r):
    pm = input("Enter a move (a new left value to bump or LL, LR, RR, RL for attack): ")

    try:
        bump = int(pm)
        move = 'b'

    except:
        attack = pm
        attack = attack.upper()
        move = 'a'
    if move == 'a':
        if attack == "LL":
            if p1l == 0 or p2l == 0:
                print("Invalid Move")
                return playermove(p1l, p1r, p2l, p2r)

            return [p1l, p1r, ((p1l + p2l) % 5), p2r]
        elif attack == "LR":
            if p1l == 0 or p2r == 0:
                print("Invalid Move")
                return playermove(p1l, p1r, p2l, p2r)
            return [p1l, p1r, p2l, ((p1l + p2r) % 5)]
        elif attack == "RR":
            if p1r == 0 or p2r == 0:
                print("Invalid Move")
                return playermove(p1l, p1r, p2l, p2r)
            return [p1l, p1r, p2l, ((p1r + p2r) % 5)]
        elif attack == "RL":
            if p1r == 0 or p2l == 0:
                print("Invalid Move")
                return playermove(p1l, p1r, p2l, p2r)
            return [p1l, p1r, ((p1r + p2l) % 5), p2r]
        else:
            print("Invalid Move")
            return playermove(p1l, p1r, p2l, p2r)
    elif move == 'b':
        valid_bumps = bumpcheck(p1l, p1r)

        if p1l == 0 or p1r == 0:

            if (bump not in valid_bumps) or (p1l + p1r == 1) or (p1r == 0 and bump == 0) or (bump == p1r):
                print("Invalid Move")
                return playermove(p1l, p1r, p2l, p2r)
            else:
                return [bump, (p1r - (bump - p1l)), p2l, p2r]
        else:
            if (bump not in valid_bumps) or (p1l + p1r == 1) or (p1r == 0 and bump == 0):
                print("Invalid Move")
                return playermove(p1l, p1r, p2l, p2r)
            else:
                return [bump, (p1r - (bump - p1l)), p2l, p2r]


def trainerLL(x1, x2, y1, y2):
    if x1 != 0 and y1 != 0:
        y1 = (x1 + y1) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def trainerLR(x1, x2, y1, y2):
    if x1 != 0 and y2 != 0:
        y2 = (x1 + y2) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def trainerRR(x1, x2, y1, y2):
    if x2 != 0 and y2 != 0:
        y2 = (x2 + y2) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def trainerRL(x1, x2, y1, y2):
    if x2 != 0 and y1 != 0:
        y1 = (x2 + y1) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def trainerbump(x1, x2, y1, y2, ch):
    x2 = (x1 + x2 - ch) % 5
    x1 = ch % 5
    return x1, x2, y1, y2


def gettrainermoves(pos):
    x1 = pos[0]
    x2 = pos[1]
    y1 = pos[2]
    y2 = pos[3]
    moves = [trainerLL(x1, x2, y1, y2), trainerLR(x1, x2, y1, y2), trainerRR(x1, x2, y1, y2), trainerRL(x1, x2, y1, y2)]
    length = len(moves)
    i = 0
    while (i < length):
        if (moves[i] == '-'):
            moves.remove(moves[i])
            length = length - 1
            continue
        i = i + 1
    bumps = [0, 1, 2, 3, 4]
    bumpsuse = [0, 1, 2, 3, 4]
    bumpsuse.remove(x1)
    bumpsok = []
    true = 1
    story1 = x1
    story2 = x2
    while true == 1:
        if (x1 + x2) >= 5:
            bumpsok = bumpsuse[(bumps[((x1 + x2) % 5) + 1]):]
            for x in range(len(bumpsok)):
                if (x1 + x2) % 5 != 0:
                    bumpsuse.remove(x)
        for i in bumpsuse:
            if i > (x1 + x2):
                pass
            else:
                bumpsok += str(i)
        bumpsok = list(map(int, bumpsok))
        for i in bumpsok:
            if story1 == 0 and story2 == 1:
                if i == 1:
                    break
            if story1 == 1 and story2 == 0:
                if i == 0:
                    break
            if story1 == 0 and story2 == i:
                pass
            elif story2 == 0 and story2 == i:
                pass
            else:
                true = 2
        break
    seen = {}
    dupes = []
    for x in bumpsok:
        if x not in seen:
            seen[x] = 1
        else:
            if seen[x] == 1:
                dupes.append(x)
            seen[x] += 1
    if dupes:
        for c in range(len(dupes)):
            bump1 = bump(x1, x2, y1, y2, dupes[c])
            moves.append(bump1)
        moves = [elem for elem in moves if elem != "-"]
        moves = list(dict.fromkeys(moves))
        choices = []
        for i in moves:
            i = list(i)
            choices.append(i)
        if x1 == 1 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 1]:
                    choices.remove(i)
        elif x1 == 2 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 2]:
                    choices.remove(i)
        elif x1 == 3 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 3]:
                    choices.remove(i)
        elif x1 == 4 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 4]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 1:
            for i in choices:
                if [i[2], i[3]] == [1, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 2:
            for i in choices:
                if [i[2], i[3]] == [2, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 3:
            for i in choices:
                if [i[2], i[3]] == [3, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 4:
            for i in choices:
                if [i[2], i[3]] == [4, 0]:
                    choices.remove(i)
        return choices
    else:
        for c in range(len(bumpsok)):
            bump2 = trainerbump(x1, x2, y1, y2, bumpsok[c])
            moves.append(bump2)
            moves = [elem for elem in moves if elem != "-"]
            moves = list(dict.fromkeys(moves))
        choices = []
        for i in moves:
            i = list(i)
            choices.append(i)
        if x1 == 1 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 1]:
                    choices.remove(i)
        elif x1 == 2 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 2]:
                    choices.remove(i)
        elif x1 == 3 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 3]:
                    choices.remove(i)
        elif x1 == 4 and x2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 4]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 1:
            for i in choices:
                if [i[2], i[3]] == [1, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 2:
            for i in choices:
                if [i[2], i[3]] == [2, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 3:
            for i in choices:
                if [i[2], i[3]] == [3, 0]:
                    choices.remove(i)
        elif x1 == 0 and x2 == 4:
            for i in choices:
                if [i[2], i[3]] == [4, 0]:
                    choices.remove(i)
        return choices


def LL(x1, x2, y1, y2):
    if x1 != 0 and y1 != 0:
        x1 = (x1 + y1) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def LR(x1, x2, y1, y2):
    if x2 != 0 and y1 != 0:
        x2 = (x2 + y1) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def RR(x1, x2, y1, y2):
    if x2 != 0 and y2 != 0:
        x2 = (x2 + y2) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def RL(x1, x2, y1, y2):
    if x1 != 0 and y2 != 0:
        x1 = (x1 + y2) % 5
        return x1, x2, y1, y2
    else:
        return "-"


def bump(x1, x2, y1, y2, ch):
    y2 = (y1 + y2 - ch) % 5
    y1 = ch % 5
    return x1, x2, y1, y2


def getmoves(pos):
    x1 = pos[0]
    x2 = pos[1]
    y1 = pos[2]
    y2 = pos[3]
    moves = [LL(x1, x2, y1, y2), LR(x1, x2, y1, y2), RR(x1, x2, y1, y2), RL(x1, x2, y1, y2)]
    length = len(moves)
    i = 0
    while (i < length):
        if (moves[i] == '-'):
            moves.remove(moves[i])
            length = length - 1
            continue
        i = i + 1
    bumps = [0, 1, 2, 3, 4]
    bumpsuse = [0, 1, 2, 3, 4]
    bumpsuse.remove(y1)
    bumpsok = []
    true = 1
    story1 = y1
    story2 = y2
    while true == 1:
        if (y1 + y2) >= 5:
            bumpsok = bumpsuse[(bumps[((y1 + y2) % 5) + 1]):]
            for x in range(len(bumpsok)):
                if (y1 + y2) % 5 != 0:
                    bumpsuse.remove(x)
        for i in bumpsuse:
            if i > (y1 + y2):
                pass
            else:
                bumpsok += str(i)
        bumpsok = list(map(int, bumpsok))
        for i in bumpsok:
            if story1 == 0 and story2 == 1:
                if i == 1:
                    break
            if story1 == 1 and story2 == 0:
                if i == 0:
                    break
            if story1 == 0 and story2 == i:
                pass
            elif story2 == 0 and story2 == i:
                pass
            else:
                true = 2
        break
    seen = {}
    dupes = []
    for x in bumpsok:
        if x not in seen:
            seen[x] = 1
        else:
            if seen[x] == 1:
                dupes.append(x)
            seen[x] += 1
    if dupes:
        for c in range(len(dupes)):
            bump1 = bump(x1, x2, y1, y2, dupes[c])
            moves.append(bump1)
        moves = [elem for elem in moves if elem != "-"]
        moves = list(dict.fromkeys(moves))
        choices = []
        for i in moves:
            i = list(i)
            choices.append(i)
        if y1 == 1 and y2 == 0:
            choices.remove([1, 1, 0, 1])
        elif y1 == 0 and y2 == 1:
            choices.remove([1, 1, 1, 0])
        return choices
    else:
        for c in range(len(bumpsok)):
            bump2 = bump(x1, x2, y1, y2, bumpsok[c])
            moves.append(bump2)
            moves = [elem for elem in moves if elem != "-"]
            moves = list(dict.fromkeys(moves))
        choices = []
        for i in moves:
            i = list(i)
            choices.append(i)
        if y1 == 1 and y2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 1]:
                    choices.remove(i)
        elif y1 == 2 and y2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 2]:
                    choices.remove(i)
        elif y1 == 3 and y2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 3]:
                    choices.remove(i)
        elif y1 == 4 and y2 == 0:
            for i in choices:
                if [i[2], i[3]] == [0, 4]:
                    choices.remove(i)
        elif y1 == 0 and y2 == 1:
            for i in choices:
                if [i[2], i[3]] == [1, 0]:
                    choices.remove(i)
        elif y1 == 0 and y2 == 2:
            for i in choices:
                if [i[2], i[3]] == [2, 0]:
                    choices.remove(i)
        elif y1 == 0 and y2 == 3:
            for i in choices:
                if [i[2], i[3]] == [3, 0]:
                    choices.remove(i)
        elif y1 == 0 and y2 == 4:
            for i in choices:
                if [i[2], i[3]] == [4, 0]:
                    choices.remove(i)
        return choices


def getEval(position, depth, turn, depth5, depth4, depth3, depth2, depth1, depth0):
    if position[0] == 0 and position[1] == 0:
        #print("instant win")
        return math.inf
    if turn == 1:
        # print("human")
        moves = gettrainermoves(position)
    else:
        # print("ai")
        moves = getmoves(position)
    #print("Depth " + str(depth) + " > " + str(position) + " >>> " + str(moves))
    if depth == 5:
        depth5.append(moves)
    #print("HERE IS DEPTH 5" + str(depth5))
    global outsideDepth5
    outsideDepth5 = depth5
    if depth == 4:
        depth4.append(moves)
    #print("HERE IS DEPTH 4" + str(depth4))
    global outsideDepth4
    outsideDepth4 = depth4
    if depth == 3:
        depth3.append(moves)
    #print("HERE IS DEPTH 3" + str(depth3))
    global outsideDepth3
    outsideDepth3 = depth3
    if depth == 2:
        depth2.append(moves)
    #print("HERE IS DEPTH 2" + str(depth2))
    global outsideDepth2
    outsideDepth2 = depth2
    if depth == 1:
        depth1.append(moves)
    #print("HERE IS DEPTH 1" + str(depth1))
    global outsideDepth1
    outsideDepth1 = depth1
    if depth == 0:
        depth0.append(moves)
    #print("HERE IS DEPTH 0" + str(depth0))
    global outsideDepth0
    outsideDepth0 = depth0
    for pos in moves:
        if pos[0] == 0 and pos[1] == 0:
            #print("ai win")
            return
        elif pos[2] == 0 and pos[3] == 0:
            #print("human win")
            return
        elif depth == 0:
            #print("end of depth")
            return
        getEval(pos, depth - 1, turn * -1, depth5, depth4, depth3, depth2, depth1, depth0)


def getEvaluation(depth_0, depth_1, depth_2, depth_3, depth_4, depth_5):
    wincount = 0
    row0 = []
    row1 = []
    row2 = []
    row3 = []
    row4 = []
    row5 = []
    row5p = depth_0
    row4p = depth_1
    row3p = depth_2
    row2p = depth_3
    row1p = depth_4
    row0p = depth_5
    for i in row0p:
        for i in i:
             row0.append(i)
    for i in row1p:
        for i in i:
             row1.append(i)
    for i in row2p:
        for i in i:
             row2.append(i)
    for i in row3p:
        for i in i:
             row3.append(i)
    for i in row4p:
        for i in i:
             row4.append(i)
    for i in row5p:
        for i in i:
             row5.append(i)
    for position in row0:
        if position[0] == 0 and position[1] == 0:
            wincount += 1
    for position in row1:
        if position[0] == 0 and position[1] == 0:
            wincount += 1
    for position in row2:
        if position[0] == 0 and position[1] == 0:
            wincount += 1
    for position in row3:
        if position[0] == 0 and position[1] == 0:
            wincount += 1
    for position in row4:
        if position[0] == 0 and position[1] == 0:
            wincount += 1
    for position in row5:
        if position[0] == 0 and position[1] == 0:
            wincount += 1
# --------------------------------------------------------------------
    for position in row0:
        if position[2] == 0 and position[3] == 0:
            wincount -= 1
    for position in row1:
        if position[2] == 0 and position[3] == 0:
            wincount -= 1
    for position in row2:
        if position[2] == 0 and position[3] == 0:
            wincount -= 1
    for position in row3:
        if position[2] == 0 and position[3] == 0:
            wincount -= 1
    for position in row4:
        if position[2] == 0 and position[3] == 0:
            wincount -= 1
    for position in row5:
        if position[2] == 0 and position[3] == 0:
            wincount -= 1
    return wincount


def reset():
    global finishing
    finishing = False
    p1[0] = 1
    p1[1] = 1
    p2[0] = 1
    p2[1] = 1


def setboard(p2l, p2r, p1l, p1r):
    p2[0] = p1l
    p2[1] = p1r
    p1[0] = p2l
    p1[1] = p2r


def aimove(position):
    global finishing
    evaluations = []
    moves = getmoves(position)
    for p in moves:
        if p[0] == 0 and p[1] == 0:
            return p
        if (p[0] == 1 and p[1] == 0 and (((position[2] != 0 and position[3] != 4) and (position[2] != 4 and position[3] != 0)) and position[0] > 0 and position[1] > 0)) or (p[0] == 0 and p[1] == 1 and (((position[2] != 0 and position[3] != 4) and (position[2] != 4 and position[3] != 0)) and position[0] > 0 and position[1] > 0)):
            #print(p[2] + p[3])
            #print("killing to hand")
            finishing = True
            return p
    if position == [1, 0, 2, 1] or position == [1, 0, 1, 2]:
        return [1, 0, 3, 0]
    if position == [0, 1, 2, 1] or position == [0, 1, 1, 2]:
        return [0, 1, 3, 0]

    if position[2] == 0:
        if position[3] == 1:
            if position[0] == 4:
                print("using strat 1")
                return [0, position[1], position[2], position[3]]
    if position[3] == 0:
        if position[2] == 1:
            if position[0] == 4:
                print("using strat 2")
                return [0, position[1], position[2], position[3]]
    if position[2] == 0:
        if position[3] == 1:
            if position[1] == 4:
                print("using strat 3")
                return [position[0], 0, position[2], position[3]]
    if position[3] == 0:
        if position[2] == 1:
            if position[1] == 4:
                print("using strat 4")
                return [position[0], 0, position[2], position[3]]

    getEval(position, 1, -1, [], [], [], [], [], [])
    #print("outdep1 " + str(outsideDepth1))
    #print("outdep0 " + str(outsideDepth0))
    row1 = []
    removethese = []
    row1p = outsideDepth0
    indcount = 0
    for i in row1p:
        for i in i:
            row1.append(i)
    #print(row1)
    #print(moves)
    #print(position)
    if position == [4, 4, 0, 2]:
        print("returning")
        return [4, 1, 0, 2]
    if position == [4, 4, 2, 0]:
        print("returning")
        return [4, 1, 2, 0]
    if position == [4, 4, 1, 1]:
        return [4, 0, 1, 1]

    for i in row1p:
        for psn in i:

            if ((psn[2] == 0 and psn[3] == 1) or (psn[2] == 1 and psn[3] == 0) or (psn[2] == 0 and psn[3] == 0)) and (position != [0, 3, 1, 1]) and (position != [3, 0, 1, 1]):
                #print("dont make this move " + str(indcount) + str(psn))
                removethese.append(indcount)
        indcount += 1
    #print(removethese)
    #print(moves)
    removethese = list(set(removethese))

    #print(outsideDepth1)
    for i in removethese:
        for ist in outsideDepth1:
            moves.remove(ist[i])
    #print(moves)
    #print("moves before onestay: " + str(moves))
    #print("finis status: " + str(finishing))
    #print(moves)
    takeouts = []
    if finishing:
        for psin in moves:
            #print("psincount")
            #print(psin)
            if psin[0] > 1 or psin[1] > 1:
                #print(psin)
                takeouts.append(psin)
    #print(takeouts)
    for i in takeouts:
        if i in moves:
            moves.remove(i)
    #print("moves after onestay: " + str(moves))
    #print(moves)
    for p in moves:
        getEval(p, 5, 1, [], [], [], [], [], [])
        #print("evlaing")
        evaluation = getEvaluation(outsideDepth0, outsideDepth1, outsideDepth2, outsideDepth3, outsideDepth4, outsideDepth5)
        evaluations.append(evaluation)
    #print("evalustions s s s  s " + str(evaluations))
    #print(evaluations)
    bestmove = moves[evaluations.index(max(evaluations))]
    #print(bestmove)
    return bestmove


def wincheck(p2l, p2r, p1l, p1r):
    if p2l + p2r == 0:
        return "ai"
    elif p1l + p1r == 0:
        return "human"


def mainloop():
    count = 0
    reset()
    while True:
        boardstate = [p1[0], p1[1], p2[0], p2[1]]
        if count > 0:
            print("\nThe computer's Move is Below")
        board()
        # --------------------------------------------------------------------------------
        win = wincheck(p1[0], p1[1], p2[0], p2[1])
        if win == "ai":
            print("The computer won.")
            mainloop()
        elif win == "human":
            print("You won!")
            mainloop()
        # --------------------------------------------------------------------------------
        playerchoice = list(playermove(p1[0], p1[1], p2[0], p2[1]))
        setboard(playerchoice[0], playerchoice[1], playerchoice[2], playerchoice[3])
        boardstate = [p1[0], p1[1], p2[0], p2[1]]
        print("\nYour Move is Below")
        board()
        # --------------------------------------------------------------------------------
        win = wincheck(p1[0], p1[1], p2[0], p2[1])
        if win == "ai":
            print("The computer won.")
            mainloop()
        elif win == "human":
            print("You won!")
            mainloop()
        # --------------------------------------------------------------------------------
        #print("bs" + str(boardstate))
        aichoice = (aimove(boardstate))
        setboard(aichoice[0], aichoice[1], aichoice[2], aichoice[3])
        count += 1


mainloop()
